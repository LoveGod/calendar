<?php
//$Id$
/**
 * @file
 * Install File
 */
// Updates happen in random order, whether or not the module is enabled,
// so include critical code here just to be sure.
include_once('./'. drupal_get_path('module', 'date_api') .'/date_api.module');
include_once('./'. drupal_get_path('module', 'calendar') .'/calendar.module');


/**
 * Implementation of hook_requirements().
 * Added to be sure the Date API version matches this code so invalid
 * functions are not called.
 */
function calendar_requirements($phase) {
  $requirements = array();
  $t = get_t();

  // This is the minimum required version for the Date API so that it will work with this module.
  $required_version = 5.2;

  // Make sure the matching version of date_api is installed.
  // Use info instead of an error at install time since the problem may
  // just be that they were installed in the wrong order.
  switch ($phase) {
    case 'runtime':
      if (variable_get('date_api_version', 0) < $required_version) {
        $requirements['calendar_api_version'] = array(
          'title' => $t('Calendar requirements'),
          'value' => $t('The Calendar module requires a more current version of the Date API. Please check for a newer version.'),
          'severity' => REQUIREMENT_ERROR,
          );
      }
      break;
     case 'install':
      if (variable_get('date_api_version', 0) < $required_version) {
        $requirements['calendar_api_version'] = array(
          'title' => $t('Calendar requirements'),
          'value' => $t('The Calendar module requires the latest version of the Date API, be sure you are installing the latest versions of both modules.'),
          'severity' => REQUIREMENT_INFO,
          );
      }
      break;
  }
  return $requirements;
}

/**
 * Implementation of hook_enable().
 * Reset the calendar caches.
 */
function calendar_enable() {
  calendar_clear_all();
}

/**
 * Implementation of hook_disable().
 * Empty the calendar caches.
 */
function calendar_disable() {
  calendar_clear_all(TRUE);
}

/**
 * Implementation of hook_uninstall().
 *
 */
function calendar_uninstall() {
  $ret = array();
  variable_del('calendar_empty_arg');
  foreach (array_keys(calendar_info()) as $view_name) {
    variable_del('calendar_time_format_'. $view_name);
    variable_del('calendar_display_format_'. $view_name);
  }
  db_query("DROP TABLE {calendar_templates}");
  db_query("DROP TABLE {calendar_years");
  // Empty the calendar caches.
  calendar_clear_all(TRUE);
  return $ret;
}

/**
 * Implementation of hook_install().
 */
function calendar_install() {
  $ret = array();

  // Make sure this module loads after date_api.
  db_query("UPDATE {system} SET weight = 1 WHERE name = 'calendar'");

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("CREATE TABLE {calendar_templates} (
        id int(11) NOT NULL,
        template int(2) unsigned NOT NULL,
        leap tinyint(1) NOT NULL,
        weekno tinyint(2) NOT NULL,
        start varchar(5) NOT NULL,
        end varchar(5) NOT NULL,
        col1 varchar(5) NOT NULL,
        col2 varchar(5) NOT NULL,
        col3 varchar(5) NOT NULL,
        col4 varchar(5) NOT NULL,
        col5 varchar(5) NOT NULL,
        col6 varchar(5) NOT NULL,
        col7 varchar(5) NOT NULL,
        KEY id  (id),
        KEY template (template)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      db_query("CREATE TABLE {calendar_years} (
        id int(11) NOT NULL,
        year int(4) unsigned NOT NULL,
        first_day tinyint(1) NOT NULL,
        template int(2) unsigned NOT NULL,
        weeks int(2) unsigned NOT NULL,
        KEY id  (id),
        KEY year (year),
        KEY template (template)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      break;

    case 'pgsql':
      db_query("CREATE TABLE {calendar_templates} (
        id int(11) NOT NULL,
        template integer(2) unsigned NOT NULL,
        leap tinyint(1) NOT NULL,
        weekno tinyint(2) NOT NULL,
        start varchar(5) NOT NULL,
        end varchar(5) NOT NULL,
        col1 varchar(5) NOT NULL,
        col2 varchar(5) NOT NULL,
        col3 varchar(5) NOT NULL,
        col4 varchar(5) NOT NULL,
        col5 varchar(5) NOT NULL,
        col6 varchar(5) NOT NULL,
        col7 varchar(5) NOT NULL,
        KEY id  (id),
        KEY template (template)
      )");
      db_query("CREATE TABLE {calendar_years} (
        id integer(11) NOT NULL,
        year integer(4) unsigned NOT NULL,
        first_day tinyint(1) NOT NULL,
        template integer(2) unsigned NOT NULL,
        weeks integer(2) unsigned NOT NULL,
        KEY id  (id),
        KEY year (year),
        KEY template (template)
      )");
      break;
  }
  $ret[] = calendar_build_templates();
  return $ret;
}

/**
 * Move these caches from 'cache' to 'cache_views' so they get cleared
 * automatically whenever views_invalidate_cache() is called.
 */
function calendar_update_5000() {
  $ret = array();
  cache_clear_all('calendar_fields', 'cache');
  cache_clear_all('calendar_views', 'cache');
  return $ret;
}

/**
 * Implementation of hook_update().
 */
function calendar_update_5001() {
  $ret = array();
  $ret[] = update_sql("UPDATE {system} SET weight = 1 WHERE name = 'calendar'");

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("CREATE TABLE {calendar_templates} (
        id int(11) NOT NULL,
        template int(2) unsigned NOT NULL,
        leap tinyint(1) NOT NULL,
        weekno tinyint(2) NOT NULL,
        start varchar(5) NOT NULL,
        end varchar(5) NOT NULL,
        col1 varchar(5) NOT NULL,
        col2 varchar(5) NOT NULL,
        col3 varchar(5) NOT NULL,
        col4 varchar(5) NOT NULL,
        col5 varchar(5) NOT NULL,
        col6 varchar(5) NOT NULL,
        col7 varchar(5) NOT NULL,
        KEY id  (id),
        KEY template (template)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      $ret[] = update_sql("CREATE TABLE {calendar_years} (
        id int(11) NOT NULL,
        year int(4) unsigned NOT NULL,
        first_day tinyint(1) NOT NULL,
        template int(2) unsigned NOT NULL,
        weeks int(2) unsigned NOT NULL,
        KEY id  (id),
        KEY year (year),
        KEY template (template)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      break;

    case 'pgsql':
      $ret[] = update_sql("CREATE TABLE {calendar_templates} (
        id int(11) NOT NULL,
        template integer(2) unsigned NOT NULL,
        leap tinyint(1) NOT NULL,
        weekno tinyint(2) NOT NULL,
        start varchar(5) NOT NULL,
        end varchar(5) NOT NULL,
        col1 varchar(5) NOT NULL,
        col2 varchar(5) NOT NULL,
        col3 varchar(5) NOT NULL,
        col4 varchar(5) NOT NULL,
        col5 varchar(5) NOT NULL,
        col6 varchar(5) NOT NULL,
        col7 varchar(5) NOT NULL,
        KEY id  (id),
        KEY template (template)
      )");
      $ret[] = update_sql("CREATE TABLE {calendar_years} (
        id integer(11) NOT NULL,
        year integer(4) unsigned NOT NULL,
        first_day tinyint(1) NOT NULL,
        template integer(2) unsigned NOT NULL,
        weeks integer(2) unsigned NOT NULL,
        KEY id  (id),
        KEY year (year),
        KEY template (template)
      )");
      break;
  }

  $ret[] = calendar_build_templates();
  return $ret;
}

/**
 * This function will build the 14 possible yearly calendar templates
 *
 * No matter how far back into the past or forward into the future you go,
 * there are only 14 possible ways a calendar can be constructed, one
 * for each possible starting day of the week for leap years and another
 * for non leap years.
 *
 * Storing these few templates in the database and retreiving them
 * when needed should be more efficient than using PHP to calculate over
 * and over again when to start and stop each month, week, and year for
 * a potentially unlimited number of years and months.
 *
 * We can also join this table into queries to insert the calendar week
 * into query results, create dummy results for empty days, or group results
 * by calendar week (native db date handling can only group by ISO week).
 *
 * This also has the advantage of making it very easy to determine the
 * calendar week for each date. There is no other good way to keep track of
 * calendar weeks in a way that works no matter what the first day of the
 * week is, and there is no easy way to convert from ISO weeks to calendar
 * weeks using PHP native functions.
 *
 */
function calendar_build_templates() {
  $res = array();
  $template = 0;
  $next_id = 0;
  for ($leap = 0; $leap <= 1; $leap++) {
    for ($fdow = 1; $fdow <= 7; $fdow++) {
      $template++;
      $res = calendar_build_template_rows($template, $leap, $fdow);
      foreach ($res as $row) {
        $next_id++;
        db_query("INSERT INTO {calendar_templates} (id, template, leap, weekno, start, end, col1, col2, col3, col4, col5, col6, col7) VALUES (%d, %d, %d, %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')", $next_id, $row['template'], $row['leap'], $row['weekno'], $row['start'], $row['end'], $row['col1'], $row['col2'], $row['col3'], $row['col4'], $row['col5'], $row['col6'], $row['col7']);
      }
    }
  }
  return array('success' => TRUE, 'query' => 'Calendar templates have been populated.');
}

/**
 * Callback to create rows in a single template.
 */
function calendar_build_template_rows($template, $leap, $fdow) {
  $nmonths = array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
  $lmonths = array(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
  $res = array();
  $m = 1;
  $d = 1;
  $i = $template;
  // Create a row for each week.
  // The maxium number of calendar weeks is 54 (for a leap year that starts
  // on the last day of the week). Break when we hit the last day of the year.
  for ($w = 1; $w <= 54; $w++) {
    $months = $leap ? $lmonths : $nmonths;
    $res[$i] = array(
      'template' => $template,
      'dow' => $fdow,
      'leap' => $leap,
      'weekno' => $w,
      );
    // Create seven columns for the days in this calendar week.
    // See if each is a valid date in this month. If so, construct
    // an iso date like MM-DD. At runtime, you can prepend the YYYY- to the
    // front of each of these dates to create a complete SQL or ISO
    // date value for comparisons and joins.
    for ($col = 1; $col <= 7; $col++) {
      if (($m == 12 && $d > 31) || ($w == 1 && $col < $fdow || $m > 12)) {
        $res[$i]['col'. $col] = '';
        $skipped = TRUE;
      }
      else {
        $date = date_pad($m) .'-'. date_pad($d);
        $res[$i]['col'. $col] = $date;
        if (empty($res[$i]['start'])) {
          $res[$i]['start'] = $date;
        }
        $res[$i]['end'] = $date;
        $skipped = FALSE;
      }
      if ($d == $months[$m - 1]) {
        $d = 0;
        $m++;
      }
      if (!$skipped) $d++;
    }
    if (($d > 31 && $m == 12) || $m == 13) break;
    $i++;
  }
  // Return the template array.
  return $res;
}