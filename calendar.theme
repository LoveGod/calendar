<?php
// $Id$

/**
 * @addtogroup themeable
 * @{
 */
/**
 * Calendar summary display.
 *
 * Intercept arguments before calendar and return their summary view,
 * Otherwise return calendar view.
 */
function theme_calendar_view_summary(&$view, $type, $level, &$items, $args) {
  if (!calendar_is_calendar_arg($view)) {
    return theme('views_summary', $view, $type, $level, $items, $args);
  }
  else {
    return theme('calendar_view_calendar', $view, $items, $type);
  }
}

/**
 * Calendar Views plugin theme, overrides default views theme
 * to create a calendar view.
 */
function theme_calendar_view_calendar(&$view, &$items, $type) {

  include_once(drupal_get_path('module', 'calendar') .'/calendar.inc');
  if ($type == 'block' || !calendar_is_calendar_arg($view)) {
    $view->calendar_type = 'month';
  }
  // Bail out here to display regular views views instead of calendar.
  switch($view->calendar_display) {
    case ('table') :
      $view->table_header = _views_construct_header($view, _views_get_fields());
      return theme('calendar_view_table', $view, $items, $type);
    case ('teasers') :
      return theme('calendar_view_teasers', $view, $items, $type);
    case ('nodes') :
      return theme('calendar_view_nodes', $view, $items, $type);
    case ('list') :
      return theme('calendar_view_list', $view, $items, $type);
  }

  $params['url'] = calendar_real_url($view, $view->args);
  $params['append'] = calendar_url_append($view);
  $params['stripe'] = 'stripe';

  // Set to TRUE to see week numbers in each row.
  $params['with_weekno'] = $view->build_type != 'block' && $view->calendar_type != 'year';

  return calendar_build_calendar($view, $items, $params);
}

/**
 * Display the nodes of a view as a list.
 */
function theme_calendar_view_list($view, $nodes, $type) {
  $output  = '<div class="calendar-calendar">';
  $output .= theme_calendar_links($view, $view->build_type != 'block');
  $output .= theme("table", calendar_nav($view), array());
  $output .= '</div>';

  $fields = _views_get_fields();
  $items = array();
  foreach ($nodes as $node) {
    $item = '';
    foreach ($view->field as $field) {
      if ($fields[$field['id']]['visible'] !== FALSE) {
        $value = theme('calendar_views_field', $field['queryname'], $fields, $field, $node, $view, $type);
        if (!empty($value)) {
          if ($field['label']) {
            $item .= "<div class='view-label ". views_css_safe('view-label-'. $field['queryname']) ."'>". $field['label'] ."</div>";
          }
          $item .= "<div class='view-field ". views_css_safe('view-data-'. $field['queryname']) ."'>";
          $item .= $value ."</div>";
        }
      }
    }
    $items[] = "<div class='view-item ". views_css_safe('view-item-'. $view->name) ."'>$item</div>\n"; // l($node->title, "node/$node->nid");
  }
  if ($items) {
   	$output .= theme('item_list', $items);
  }
  return $output;
}

/**
 * Display the nodes of a view as a table.
 */
function theme_calendar_view_table($view, $nodes, $type) {
  $output  = '<div class="calendar-calendar">';
  $output .= theme_calendar_links($view, $view->build_type != 'block');
  $output .= theme("table", calendar_nav($view), array());
  $output .= '</div>';

  $fields = _views_get_fields();
  $rows = array();
  foreach ($nodes as $node) {
    $row = array();
    foreach ($view->field as $field) {
      if ($fields[$field['id']]['visible'] !== FALSE) {
        $cell['data'] = theme('calendar_views_field', $field['queryname'], $fields, $field, $node, $view, $type);
        $cell['class'] = "view-field ". views_css_safe('view-field-'. $field['queryname']);
        $row[] = $cell;
      }
    }
    $rows[] = $row;
  }
  $output .= theme('table', $view->table_header, $rows);
  return $output;
}

/**
 * Display the nodes of a view as teasers.
 */
function theme_calendar_view_teasers($view, $nodes, $type) {
  return views_theme('calendar_view_nodes', $view, $nodes, 'teasers');
}

/**
 * Display the nodes of a view as plain nodes.
 */
function theme_calendar_view_nodes($view, $nodes, $type, $teasers = false, $links = true) {
  $output  = '<div class="calendar-calendar">';
  $output .= theme_calendar_links($view, $view->build_type != 'block');
  $output .= theme("table", calendar_nav($view), array());
  $output .= '</div>';

  $output = array();
  foreach ($nodes as $n) {
    if (isset($n->calendar_node_theme)) {
      $theme = $n->calendar_node_theme;
      $data[] = theme($theme, $n, $view);
    }
    else {
      $node = node_load($n->nid);
      $data[] = node_view($node, $teasers, false, $links);
    }
  }
  $output .= implode($data);
  return $output;
}

/**
 * Theme the calendar page title.
 *
 * Views defaults to displaying the title of the last argument in the
 * view, rather than the View title or other values. Use this theme
 * to override that behavior.
 *
 * $view->build_type indicates whether this view is being rendered as a page
 * or a block, use that to handle the title differently for each.
 *
 * views_get_title() $context can be:
 *  'page' - The title that goes with the last argument in $args.
 *  'menu' - The value in View Menu Title.
 *
 * or just use the values of:
 *  $view->page_title,
 *  $view->menu_title,
 *  $view->block_title.
 */
function theme_calendar_page_title($view, $items, $output) {
  switch ($view->build_type) {
    case 'page':
      if ($view->calendar_type == 'year') {
        return $view->year;
      }
      else {
        return views_get_title($view, $context = 'page', $args = $view->real_args);
      }
    case 'block':
      return $view->block_title;
  }
}

/**
 * Theme the calendar title and breadcrumbs
 *   Arguments are evaluated in year, month, day or year, week order
 *   so you can track previous values in the session.
 *
 * @param string $field_type - 'YEAR', 'MONTH', 'DAY', 'WEEK'
 * @param integer $value - the current number for the field type as selected in the view argument.
 * @return string formatted title
 */
function theme_calendar_arg_title($field_type, $value, $query) {
  $view = $GLOBALS['current_view'];
  $value = intval(check_plain($value));
  if (empty($value)) {
    if ($view->month) {
      return date_format_date($view->min_date, 'custom', 'F Y');
    }
    elseif ($view->year) {
     return $view->year;
    }
	}
	else {
	  switch ($field_type) {
    case 'YEAR':
      $view->year = $value;
      return $view->year;
    case 'MONTH':
      return date_format_date($view->min_date, 'custom', 'F');
    case 'DAY':
      return date_format_date($view->min_date, 'custom', 'l, F j Y');
    case 'WEEK':
    	return t('Week of @date', array('@date' => date_format($view->min_date, 'F j')));
   }
	}
}

/**
 * Theme the navigation bar title
 *
 * @param string $type - 'year', 'month', 'day', 'week'
 * @param object $view - the current view object
 * @return formatted title
 */
function theme_calendar_nav_title($type, $view) {
  if ($type == 'year') {
    return $view->year;
  }
  if ($view->mini) {
  	// Month navigation titles are used as links in the mini view.
  	return l(date_format_date($view->min_date, 'custom', 'M Y'), $view->url .'/'. $view->year .'/'. $view->month, array(), calendar_url_append($view));
  }
  else {
    // Otherwise, just show the date.
    switch ($view->calendar_type) {
      case 'day':
        return date_format_date($view->min_date, 'custom', 'l, F j Y');
      case 'week':
        return t('Week of @date', array('@date' => date_format($view->min_date, 'F j')));
      default:
        return date_format_date($view->min_date, 'custom', 'M Y');
    }
  }
}

/**
 * Links at the top of the calendar.
 *
 * @param links
 *   TRUE/FALSE, should links be shown.
 * @param view
 *   The current view being rendered
 */
function theme_calendar_links($view, $links = FALSE) {
  $now = date_now();
  // add links to the top of the calendar to switch from one view to another
  if ($links) {
    $view->real_url = calendar_real_url($view, $view->args);
    $base_url = $view->real_url .'/'. $view->year;
    $view->month    = $view->month && $view->month != CALENDAR_EMPTY_ARG ? $view->month : date_format($now, 'm');
    $view->day      = $view->day && $view->day != CALENDAR_EMPTY_ARG ? $view->day : date_format($now, 'j');
    if (empty($view->week) || $view->week == CALENDAR_EMPTY_ARG) {
      $template = calendar_year_template($view->year);
      $compare = date_pad($view->month) .'-'. date_pad($view->day);
      $view->week = db_result(db_query("SELECT weekno FROM {calendar_templates} WHERE template = %d AND start <= '%s' AND end >= '%s'", $template, $compare, $compare));
    }

    $append = calendar_url_append($view);
    if ($_GET['view']) {
      $append .= '&view='. $_GET['view'];
    }

    $calendar_links[] = array('title' => t('Year'), 'href' => $view->real_url .'/'. $view->year, 'query' => $append);
    $calendar_links[] = array('title' => t('Month'), 'href' => $view->real_url .'/'. $view->year .'/'. $view->month , 'query' => $append);
    $calendar_links[] = array('title' => t('Week'), 'href' => $view->real_url .'/'. $view->year .'/W'. $view->week, 'query' => $append);
    $calendar_links[] = array('title' => t('Day'), 'href' => $view->real_url .'/'. $view->year .'/'. $view->month .'/'. $view->day, 'query' => $append);

    // If the Date Popup module is enabled, add a popup date selector.
    if (module_exists('date_popup')) {
      $output = '<div class="clear-block">'. calendar_date_select($view) .'</div>';
    }
    $output .= theme('links', $calendar_links);
    return $output;
  }
}

/**
 * Format the 'next' navigation controls for calendar calendars
 *
 * @param link
 *   The url for the navigation
 */
function theme_calendar_nav_next($url, $text = TRUE, $querystring = NULL) {
  return '<span class="next">'. l(($text ? t('next') : '') .' Â»', $url, array(), (!empty($querystring) ? $querystring : NULL)) .'</span>';
}

/**
 * Format the 'previous' navigation controls for calendar calendars
 *
 * @param link
 *   The url for the navigation
 */
function theme_calendar_nav_prev($url, $text = TRUE, $querystring = NULL) {
  return '<span class="prev">'. l('Â« '. ($text ? t('prev') : ''), $url, array(), (!empty($querystring) ? $querystring : NULL)) .'</span>';
}

/**
 * Format a node stripe legend
 */
function theme_calendar_stripe_legend($stripe_labels) {
  $header = array(
      array('class' => 'legend', 'data' => t('Item')),
      array('class' => 'legend', 'data' => t('Key'))
      );
  foreach ($stripe_labels as $stripe => $label) {
    $node = new StdClass();
    $node->stripe = $stripe;
    $rows[] = array($label, theme('calendar_stripe_stripe', $node), array('class' => 'stripe'));
  }
  $output = theme('table', $header, $rows, array('class' => 'mini'));
  return $output;
}

/**
 * Format node stripes
 * Add key value to text, then hide it with css for accessibility to screen readers
 */
function theme_calendar_stripe_stripe($node) {
  static $stripe, $stripe_map;

  if(!$stripe_map[$node->stripe]) {
    if($stripe >= 10) {
      $stripe = 1;
    }
    else {
      $stripe++;
    }
    $stripe_map[$node->stripe] = $stripe;
  }

  $output .= '<div class="stripe-'. $stripe_map[$node->stripe] .'" title="Key: '.$stripe_map[$node->stripe] .'"><span class="stripe">Key '.$stripe_map[$node->stripe] .'</span></div>'."\n";
  return $output;
}

/**
 * Format a year view
 */
function theme_calendar_year($view, $header, $rows) {
  $output = '<div class="calendar-calendar"><div class="year-view">';
  $rows_out = array();
  $row = array();
  $i = 1;
  foreach ($rows as $month => $month_rows) {
    $view->month = $month;
    $view->min_date = date_make_date($view->year .'-'. date_pad($view->month) .'-01 00:00:00', date_default_timezone_name());
    $month_header = array(array('data' => theme('calendar_nav_title', 'month', $view), 'colspan' => 7));
    $row[] = array(
      'data' => theme('calendar_month', 'mini', $month_header, $month_rows),
      );

    // Group three mini month calendars in each year row.
    if ($i == 3) {
      $rows_out[] = $row;
      $row = array();
      $i = 0;
    }
    $i++;
  }
  $output .= theme("table", $header, $rows_out, array('class' => 'mini-row'));
  $output .= "</div></div>\n";
  return $output;
}

/**
 * Format a month view
 */
function theme_calendar_month($view, $header, $rows) {
  $attrs = array();
  if ($view->mini == 'mini') {
    $attrs = array('class' => 'mini');
  }
  $output = theme("table", $header, $rows, $attrs);
  return '<div class="calendar-calendar"><div class="month-view">'. $output ."</div></div>\n";
}

/**
 * Format a week view
 */
function theme_calendar_week($view, $header, $rows) {
  $output = theme("table", $header, $rows);
  return '<div class="calendar-calendar"><div class="week-view">'. $output ."</div></div>\n";
}

/**
 * Format a day view
 *
 * It's really not great to force this into a table, but the navigation
 * is a table header and showing the header without a body is invalid html,
 * so we force the data into a table cell.
 */
function theme_calendar_day($view, $header, $data) {
  $rows = array(array(array('data' => $data, 'colspan' => 3)));
  $output = theme("table", $header, $rows);
  return '<div class="calendar-calendar"><div class="day-view">'. $output ."</div></div>\n";
}

/**
 * Format an calendar node for display in an expanded calendar, like a calendar page
 *
 * @param node
 *   The node being displayed
 */
function theme_calendar_node_day($node, $view) {
  $output = '<div class="calendar dayview">'."\n";
  $output .= theme('calendar_stripe_stripe', $node);
  $fields = _views_get_fields();
  $item = '';
  foreach ($view->field as $field) {
    if ($fields[$field['id']]['visible'] !== FALSE) {
      $value = theme('calendar_views_field', $field['queryname'], $fields, $field, $node, $view, $type);
      if (!empty($value)) {
        if ($field['label']) {
          $item .= "<div class='view-label ". views_css_safe('view-label-'. $field['queryname']) ."'>". $field['label'] ."</div>";
        }
        $item .= "<div class='view-field ". views_css_safe('view-data-'. $field['queryname']) ."'>";
        $item .= $value ."</div>";
      }
    }
  }
  // Remote items may have a teaser to show.
  if ($node->remote && $node->teaser) {
    $item .= '<div class="content">'. ($node->teaser) ."</div>\n";
  }
  $output .= "<div class='view-item ". views_css_safe('view-item-'. $view->name) ."'>$item</div>\n";
  $output .= "</div>\n";
  return $output;
}

/**
 * Format an calendar node for display in an expanded calendar, like a calendar page
 *
 * @param node
 *   The node being displayed
 */

function theme_calendar_node_week($node, $view) {
  $output .= '<div class="calendar weekview">'."\n";
  $output .= theme('calendar_stripe_stripe', $node);
  $fields = _views_get_fields();
  $item = '';
  foreach ($view->field as $field) {
    if ($fields[$field['id']]['visible'] !== FALSE) {
      // Skip the label in this small box, show only the value;
      $value = theme('calendar_views_field', $field['queryname'], $fields, $field, $node, $view, $type);
      if (!empty($value)) {
        $item .= "<div class='view-field ". views_css_safe('view-data-'. $field['queryname']) ."'>";
        $item .= $value ."</div>";
      }
    }
  }
  $output .= "<div class='view-item ". views_css_safe('view-item-'. $view->name) ."'>$item</div>\n";
  $output .= '</div>' . "\n";
  return $output;
}

/**
 * Format an calendar node for display in an expanded calendar, like a calendar page
 *
 * @param node
 *   The node being displayed
 */
function theme_calendar_node_month($node, $view) {
  $output .= '<div class="calendar monthview">'."\n";
  $output .= theme('calendar_stripe_stripe', $node);
  $fields = _views_get_fields();
  $item = '';
  foreach ($view->field as $field) {
    if ($fields[$field['id']]['visible'] !== FALSE) {
      // Skip the label in this small box, show only the value;
      $value = theme('calendar_views_field', $field['queryname'], $fields, $field, $node, $view, $type);
      if (!empty($value)) {
        $item .= "<div class='view-field ". views_css_safe('view-data-'. $field['queryname']) ."'>";
        $item .= $value ."</div>";
      }
    }
  }
  $output .= "<div class='view-item ". views_css_safe('view-item-'. $view->name) ."'>$item</div>\n";
  $output .= "</div>\n";
  return $output;
}

/**
 * Format an date's day box in a calendar
 *
 * @param date
 *   The day to display in YYYY-MM-DD format.
 */
function theme_calendar_date_box($date, $view, $params, $selected = FALSE) {
  $parts = explode('-', substr($date, 0, 10));
  $year = $parts[0];
  $month = intval($parts[1]);
  $day = intval($parts[2]);
  $url = $params['url'] .'/'. $year .'/'. $month .'/'. $day;
  $append = $params['append'];

  if ($view->mini) {
    if ($selected) {
      return '<div class="mini-day-on">'. l($day, $url, NULL, $append) .'</div>';
    }
    else {
      return '<div class="mini-day-off">'. l($day, $url, NULL, $append) .'</div>';
    }
  }
  if ($view->calendar_type != 'day') {
    return '<div class="day">'. l($day, $url, NULL, $append) .'</div>'."\n";
  }
  $output = '<div class="day">'. l($day, $url, NULL, $append) .'</div>'."\n";
  return $output;
}

/**
 * Format an empty day on a calendar
 *
 * @param day
 *   The day to display.
 */
function theme_calendar_empty_day() {
  return '<div class="calendar-empty">&nbsp;</div>'."\n";
}

/**
 * Wrapper around views_theme_field() to properly format the dates in the view.
 * Use the usual views field formatting for all other fields.
 */
function theme_calendar_views_field($fieldname, $fields, $field, $node, $view, $type) {
  if (isset($node->calendar_field_theme)) {
    $theme = $node->calendar_field_theme;
    return theme($theme, $fieldname, $fields, $field, $node, $view, $type);
  }

  $calendar_fields = calendar_fields();
  if (!in_array($field['field'], array_keys($calendar_fields))) {
    $item = views_theme_field('views_handle_field', $fieldname, $fields, $field, $node, $view);
  }
  elseif ($fieldname != $node->datefield) {
    $item = '';
  }
  else {
    if (!empty($node->$fieldname)) {
      $item = theme('calendar_date_combo', $node, $field['label'], $view);
    }
  }
  return $item;
}

/**
 * Format a from/to date in the calendar view.
 *
 * Alter the display as appropriate for the type of view.
 * We have to do our own display of the date because we altered the
 * value to the local timezone, and the built-in formatters assume
 * they're operating on a UTC date. Plus we can fine-tune the display
 * to show only the time in the calendar month and week cells but the
 * whole date in other places.
 */
function theme_calendar_date_combo($node, $label, $view) {
  switch ($view->calendar_display) {
    // Some of the calendar views need a smaller date format.
    case 'calendar':
      switch ($view->calendar_type) {
        case 'year':
          // We don't display individual dates in the calendar year view.
          return;
        case 'week':
        case 'month':
          // No room for a label or the full date in these small
          // displays, show only the time.
          $format = $node->format_time;
          $label = '';
          break;
        case 'day':
          $format = $node->format;
          break;
      }
      break;
    // For non-calendar views, like lists and tables, show the entire date.
    default:
      $format = $node->format;
      break;
  }
  $date1 = date_format_date($node->calendar_start_date, 'custom', $format);
  $date2 = date_format_date($node->calendar_end_date, 'custom', $format);

  // No date values, display nothing.
  if (empty($date1) && empty($date2)) {
    $output = '';
  }
  // From and To dates match or there is no To date,
  // display a complete single date.
  elseif ($date1 == $date2 || empty($date2)) {
    $output = '<span class="date-display-single">'. $date1 .'</span>';
  }
  // Full date format, same day, different times, don't repeat the date
  // but show both From and To times.
  elseif (date_format($node->calendar_start_date, $node->format_time) != date_format($node->calendar_end_date, $node->format_time) && $format != $node->format_time) {
    $date_format = date_limit_format($format, array('year', 'month', 'day'));
    $output = '<span class="date-display-single">'. date_format($node->calendar_start_date, $date_format).'</span> '.
      '<span class="date-display-start">'. date_format($node->calendar_start_date, $node->format_time) .'</span>'.
      '<span class="date-display-separator"> - </span>'.
      '<span class="date-display-end">'. date_format($node->calendar_end_date, $node->format_time) .'</span>';
  }
  // Time format only or different days, display both in their entirety.
  else {
    $output = '<span class="date-display-start">'. $date1 .'</span>'.
      '<span class="date-display-separator"> - </span>'.
      '<span class="date-display-end">'. $date2 .'</span>';
  }
  return $output;
}

/** @} End of addtogroup themeable */